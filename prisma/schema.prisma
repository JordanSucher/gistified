generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  emailVerified DateTime?
  image       String?
  password    String?
  name        String?
  emailPreference EmailPreference @default(never)
  summaries   UserSummary[]
  subscriptions Subscription[]
  accounts      Account[]
  sessions      Session[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  userId       Int
  publicationId Int
  user         User       @relation(fields: [userId], references: [id])
  publication  Publication @relation(fields: [publicationId], references: [id])
  @@id([userId, publicationId])
}

model Summary {
  id          Int           @id @default(autoincrement())
  content     String
  episodeId   Int
  status      SummaryStatus @default(processing)
  episode     Episode       @relation(fields: [episodeId], references: [id])
  userSummaries UserSummary[]
}

model Episode {
  id            Int         @id @default(autoincrement())
  title         String
  description   String?
  url           String?
  transcriptUrl String?
  publishedAt   DateTime?
  publicationId Int
  publication   Publication @relation(fields: [publicationId], references: [id])
  summaries     Summary[]

  @@unique([url])
}

model UserSummary {
  userId     Int
  summaryId  Int
  read       Boolean       @default(false)
  user       User          @relation(fields: [userId], references: [id])
  summary    Summary       @relation(fields: [summaryId], references: [id])
  @@id([userId, summaryId])
}


model Publication {
  id Int @id @default(autoincrement())
  title String
  description String?
  imageurl String?
  episodes Episode[]
  subscriptions Subscription[]
  rssFeedUrl String
} 

enum SummaryStatus {
  processing
  published
}

enum EmailPreference {
  never
  daily
  weekly
}